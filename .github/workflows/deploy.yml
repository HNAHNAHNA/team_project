name: Build and Deploy All Services

on:
  push:
    branches: [ master ]
    paths:
      - 'back/**'
      - 'python/**'
      - 'docker-compose.yml'

jobs:
  build-spring:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Write application.properties from secret
        run: echo "${{ secrets.SPRING_ENV_B64 }}" | base64 -d > src/main/resources/application.properties
        working-directory: ./back

      - name: Build and push Spring image to GHCR
        env:
          IMAGE_ID: ghcr.io/hnahnahna/team_project/staynguide-spring:latest
        run: |
          docker build -f back/Dockerfile -t $IMAGE_ID ./back
          docker push $IMAGE_ID

deploy:
    needs: build-spring
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Copy SSH key
        run: |
          echo "${{ secrets.EC2_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: Add EC2 host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        run: |
          ssh -i ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd ~/team_project

            echo "🔄 1. 최신 코드로 업데이트"
            git reset --hard origin/master

            echo "📥 2. 최신 Spring 이미지 Pull"
            docker compose pull spring-back

            echo "🚀 3. 모든 서비스 재시작 (FastAPI는 필요시 빌드)"
            docker compose up --build -d

            echo "🧹 4. 불필요한 Docker 이미지 정리"
            docker image prune -f
          EOF
